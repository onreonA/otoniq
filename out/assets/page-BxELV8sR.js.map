{"version":3,"file":"page-BxELV8sR.js","sources":["../../src/domain/entities/Product.ts","../../src/infrastructure/database/supabase/repositories/SupabaseProductRepository.ts","../../src/application/use-cases/product/CreateProductUseCase.ts","../../src/application/use-cases/product/GetProductsUseCase.ts","../../src/application/use-cases/product/UpdateProductUseCase.ts","../../src/application/use-cases/product/DeleteProductUseCase.ts","../../src/infrastructure/services/ProductService.ts","../../src/presentation/pages/products/components/ProductModal.tsx","../../src/presentation/pages/products/page.tsx"],"sourcesContent":["/**\n * Product Domain Entity\n *\n * Core business logic for products in the e-commerce platform.\n * Contains validation rules and business operations.\n */\n\nexport interface ProductVariant {\n  id: string;\n  product_id: string;\n  name: string;\n  sku: string;\n  price: number;\n  cost: number;\n  stock_quantity: number;\n  weight?: number;\n  dimensions?: {\n    length: number;\n    width: number;\n    height: number;\n  };\n  attributes: Record<string, any>;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface ProductImage {\n  id: string;\n  product_id: string;\n  url: string;\n  alt_text?: string;\n  sort_order: number;\n  is_primary: boolean;\n  created_at: Date;\n}\n\nexport interface ProductCategory {\n  id: string;\n  name: string;\n  slug: string;\n  parent_id?: string;\n  description?: string;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface ProductAuditLog {\n  id: string;\n  product_id: string;\n  action: 'created' | 'updated' | 'deleted' | 'price_changed' | 'stock_changed';\n  old_values?: Record<string, any>;\n  new_values?: Record<string, any>;\n  changed_by: string;\n  changed_at: Date;\n  reason?: string;\n}\n\nexport class Product {\n  constructor(\n    public readonly id: string,\n    public readonly tenant_id: string,\n    public name: string,\n    public description: string,\n    public short_description: string,\n    public sku: string,\n    public status: 'active' | 'inactive' | 'draft' | 'archived',\n    public product_type: 'simple' | 'variable' | 'grouped' | 'external',\n    public categories: string[],\n    public tags: string[],\n    public weight?: number,\n    public dimensions?: {\n      length: number;\n      width: number;\n      height: number;\n    },\n    public variants: ProductVariant[] = [],\n    public images: ProductImage[] = [],\n    public metadata: Record<string, any> = {},\n    public seo_title?: string,\n    public seo_description?: string,\n    public seo_keywords: string[] = [],\n    public created_at: Date = new Date(),\n    public updated_at: Date = new Date()\n  ) {\n    this.validate();\n  }\n\n  /**\n   * Business validation rules\n   */\n  private validate(): void {\n    if (!this.name || this.name.trim().length === 0) {\n      throw new Error('Product name is required');\n    }\n\n    if (!this.sku || this.sku.trim().length === 0) {\n      throw new Error('Product SKU is required');\n    }\n\n    if (!this.tenant_id) {\n      throw new Error('Product must belong to a tenant');\n    }\n\n    if (this.variants.length > 0 && this.product_type === 'simple') {\n      throw new Error('Simple products cannot have variants');\n    }\n\n    if (this.variants.length === 0 && this.product_type === 'variable') {\n      throw new Error('Variable products must have variants');\n    }\n\n    // SKU uniqueness within tenant\n    const duplicateSkus = this.variants.filter(\n      (variant, index, arr) =>\n        arr.findIndex(v => v.sku === variant.sku) !== index\n    );\n    if (duplicateSkus.length > 0) {\n      throw new Error('Duplicate SKUs found in variants');\n    }\n  }\n\n  /**\n   * Update product name\n   */\n  updateName(name: string): void {\n    if (!name || name.trim().length === 0) {\n      throw new Error('Product name cannot be empty');\n    }\n    this.name = name.trim();\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Update product description\n   */\n  updateDescription(description: string, short_description: string): void {\n    this.description = description;\n    this.short_description = short_description;\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Add product variant\n   */\n  addVariant(\n    variant: Omit<\n      ProductVariant,\n      'id' | 'product_id' | 'created_at' | 'updated_at'\n    >\n  ): void {\n    if (this.product_type === 'simple') {\n      throw new Error('Cannot add variants to simple products');\n    }\n\n    // Check for duplicate SKU\n    const existingVariant = this.variants.find(v => v.sku === variant.sku);\n    if (existingVariant) {\n      throw new Error(`Variant with SKU ${variant.sku} already exists`);\n    }\n\n    const newVariant: ProductVariant = {\n      ...variant,\n      id: crypto.randomUUID(),\n      product_id: this.id,\n      created_at: new Date(),\n      updated_at: new Date(),\n    };\n\n    this.variants.push(newVariant);\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Remove product variant\n   */\n  removeVariant(variantId: string): void {\n    const index = this.variants.findIndex(v => v.id === variantId);\n    if (index === -1) {\n      throw new Error('Variant not found');\n    }\n\n    this.variants.splice(index, 1);\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Update variant stock\n   */\n  updateVariantStock(variantId: string, quantity: number): void {\n    const variant = this.variants.find(v => v.id === variantId);\n    if (!variant) {\n      throw new Error('Variant not found');\n    }\n\n    if (quantity < 0) {\n      throw new Error('Stock quantity cannot be negative');\n    }\n\n    variant.stock_quantity = quantity;\n    variant.updated_at = new Date();\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Update variant price\n   */\n  updateVariantPrice(variantId: string, price: number): void {\n    const variant = this.variants.find(v => v.id === variantId);\n    if (!variant) {\n      throw new Error('Variant not found');\n    }\n\n    if (price < 0) {\n      throw new Error('Price cannot be negative');\n    }\n\n    variant.price = price;\n    variant.updated_at = new Date();\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Add product image\n   */\n  addImage(\n    image: Omit<ProductImage, 'id' | 'product_id' | 'created_at'>\n  ): void {\n    const newImage: ProductImage = {\n      ...image,\n      id: crypto.randomUUID(),\n      product_id: this.id,\n      created_at: new Date(),\n    };\n\n    this.images.push(newImage);\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Remove product image\n   */\n  removeImage(imageId: string): void {\n    const index = this.images.findIndex(img => img.id === imageId);\n    if (index === -1) {\n      throw new Error('Image not found');\n    }\n\n    this.images.splice(index, 1);\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Set primary image\n   */\n  setPrimaryImage(imageId: string): void {\n    // Remove primary from all images\n    this.images.forEach(img => (img.is_primary = false));\n\n    // Set new primary\n    const image = this.images.find(img => img.id === imageId);\n    if (!image) {\n      throw new Error('Image not found');\n    }\n\n    image.is_primary = true;\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Update product status\n   */\n  updateStatus(status: 'active' | 'inactive' | 'draft' | 'archived'): void {\n    this.status = status;\n    this.updated_at = new Date();\n  }\n\n  /**\n   * Get primary image URL\n   */\n  getPrimaryImageUrl(): string | null {\n    const primaryImage = this.images.find(img => img.is_primary);\n    return primaryImage?.url || null;\n  }\n\n  /**\n   * Get total stock quantity\n   */\n  getTotalStock(): number {\n    if (this.product_type === 'simple') {\n      return 0; // Simple products don't have variants\n    }\n    return this.variants.reduce(\n      (total, variant) => total + variant.stock_quantity,\n      0\n    );\n  }\n\n  /**\n   * Get minimum price from variants\n   */\n  getMinPrice(): number | null {\n    if (this.variants.length === 0) return null;\n    return Math.min(...this.variants.map(v => v.price));\n  }\n\n  /**\n   * Get maximum price from variants\n   */\n  getMaxPrice(): number | null {\n    if (this.variants.length === 0) return null;\n    return Math.max(...this.variants.map(v => v.price));\n  }\n\n  /**\n   * Check if product is in stock\n   */\n  isInStock(): boolean {\n    return this.getTotalStock() > 0;\n  }\n\n  /**\n   * Get audit log entry\n   */\n  createAuditLog(\n    action: ProductAuditLog['action'],\n    changedBy: string,\n    oldValues?: Record<string, any>,\n    newValues?: Record<string, any>,\n    reason?: string\n  ): ProductAuditLog {\n    return {\n      id: crypto.randomUUID(),\n      product_id: this.id,\n      action,\n      old_values: oldValues,\n      new_values: newValues,\n      changed_by: changedBy,\n      changed_at: new Date(),\n      reason,\n    };\n  }\n\n  /**\n   * Convert to plain object for persistence\n   */\n  toJSON(): any {\n    return {\n      id: this.id,\n      tenant_id: this.tenant_id,\n      name: this.name,\n      description: this.description,\n      short_description: this.short_description,\n      sku: this.sku,\n      status: this.status,\n      product_type: this.product_type,\n      categories: this.categories,\n      tags: this.tags,\n      weight: this.weight,\n      dimensions: this.dimensions,\n      variants: this.variants,\n      images: this.images,\n      metadata: this.metadata,\n      seo_title: this.seo_title,\n      seo_description: this.seo_description,\n      seo_keywords: this.seo_keywords,\n      created_at: this.created_at,\n      updated_at: this.updated_at,\n    };\n  }\n}\n","/**\n * Supabase Product Repository Implementation\n *\n * Implements the ProductRepository interface using Supabase.\n */\n\nimport { supabase } from '../client';\nimport { Product } from '../../../../domain/entities/Product';\nimport {\n  ProductRepository,\n  ProductFilters,\n  ProductSortOptions,\n  PaginationOptions,\n  PaginatedResult,\n} from '../../../../domain/repositories/ProductRepository';\n\nexport class SupabaseProductRepository implements ProductRepository {\n  /**\n   * Find product by ID\n   */\n  async findById(id: string): Promise<Product | null> {\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .select(\n          `\n          *,\n          product_variants (*),\n          product_images (*)\n        `\n        )\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n      if (!data) return null;\n\n      return this.mapToEntity(data);\n    } catch (error) {\n      console.error('Find product by ID error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Find product by SKU within tenant\n   */\n  async findBySku(tenantId: string, sku: string): Promise<Product | null> {\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .select(\n          `\n          *,\n          product_variants (*),\n          product_images (*)\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .eq('sku', sku)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error; // PGRST116 = no rows returned\n      if (!data) return null;\n\n      return this.mapToEntity(data);\n    } catch (error) {\n      console.error('Find product by SKU error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Find products with filters and pagination\n   */\n  async findMany(\n    filters: ProductFilters,\n    sort?: ProductSortOptions,\n    pagination?: PaginationOptions\n  ): Promise<PaginatedResult<Product>> {\n    try {\n      let query = supabase.from('products').select(\n        `\n          *,\n          product_variants (*),\n          product_images (*)\n        `,\n        { count: 'exact' }\n      );\n\n      // Apply filters\n      if (filters.tenant_id) {\n        query = query.eq('tenant_id', filters.tenant_id);\n      }\n\n      if (filters.status) {\n        query = query.eq('status', filters.status);\n      }\n\n      if (filters.product_type) {\n        query = query.eq('product_type', filters.product_type);\n      }\n\n      if (filters.categories && filters.categories.length > 0) {\n        query = query.overlaps('categories', filters.categories);\n      }\n\n      if (filters.tags && filters.tags.length > 0) {\n        query = query.overlaps('tags', filters.tags);\n      }\n\n      if (filters.search) {\n        query = query.or(\n          `name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,sku.ilike.%${filters.search}%`\n        );\n      }\n\n      if (filters.in_stock !== undefined) {\n        if (filters.in_stock) {\n          // Products with variants that have stock > 0\n          query = query.gt('product_variants.stock_quantity', 0);\n        } else {\n          // Products with no stock\n          query = query.eq('product_variants.stock_quantity', 0);\n        }\n      }\n\n      if (filters.created_after) {\n        query = query.gte('created_at', filters.created_after.toISOString());\n      }\n\n      if (filters.created_before) {\n        query = query.lte('created_at', filters.created_before.toISOString());\n      }\n\n      // Apply sorting\n      if (sort) {\n        query = query.order(sort.field, {\n          ascending: sort.direction === 'asc',\n        });\n      } else {\n        query = query.order('created_at', { ascending: false });\n      }\n\n      // Apply pagination\n      if (pagination) {\n        const from = (pagination.page - 1) * pagination.limit;\n        const to = from + pagination.limit - 1;\n        query = query.range(from, to);\n      }\n\n      const { data, error, count } = await query;\n\n      if (error) {\n        console.error('Supabase query error:', error);\n        console.error('Query details:', {\n          filters,\n          sort,\n          pagination,\n          tenant_id: filters.tenant_id,\n        });\n        throw error;\n      }\n\n      const products = (data || []).map(item => this.mapToEntity(item));\n      const total = count || 0;\n      const totalPages = pagination ? Math.ceil(total / pagination.limit) : 1;\n\n      return {\n        data: products,\n        total,\n        page: pagination?.page || 1,\n        limit: pagination?.limit || total,\n        totalPages,\n        hasNext: pagination ? pagination.page < totalPages : false,\n        hasPrev: pagination ? pagination.page > 1 : false,\n      };\n    } catch (error) {\n      console.error('Find products error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Find all products for a tenant\n   */\n  async findByTenant(\n    tenantId: string,\n    sort?: ProductSortOptions,\n    pagination?: PaginationOptions\n  ): Promise<PaginatedResult<Product>> {\n    return this.findMany({ tenant_id: tenantId }, sort, pagination);\n  }\n\n  /**\n   * Find products by category\n   */\n  async findByCategory(\n    tenantId: string,\n    categoryId: string,\n    sort?: ProductSortOptions,\n    pagination?: PaginationOptions\n  ): Promise<PaginatedResult<Product>> {\n    return this.findMany(\n      { tenant_id: tenantId, categories: [categoryId] },\n      sort,\n      pagination\n    );\n  }\n\n  /**\n   * Search products by name or description\n   */\n  async search(\n    tenantId: string,\n    query: string,\n    sort?: ProductSortOptions,\n    pagination?: PaginationOptions\n  ): Promise<PaginatedResult<Product>> {\n    return this.findMany(\n      { tenant_id: tenantId, search: query },\n      sort,\n      pagination\n    );\n  }\n\n  /**\n   * Create new product\n   */\n  async create(product: Product): Promise<Product> {\n    try {\n      const productData = {\n        id: product.id,\n        tenant_id: product.tenant_id,\n        name: product.name,\n        description: product.description,\n        short_description: product.short_description,\n        sku: product.sku,\n        status: product.status,\n        product_type: product.product_type,\n        categories: product.categories,\n        tags: product.tags,\n        weight: product.weight,\n        dimensions: product.dimensions,\n        metadata: product.metadata,\n        seo_title: product.seo_title,\n        seo_description: product.seo_description,\n        seo_keywords: product.seo_keywords,\n        created_at: product.created_at.toISOString(),\n        updated_at: product.updated_at.toISOString(),\n      };\n\n      // Insert product\n      const { data: productResult, error: productError } = await supabase\n        .from('products')\n        .insert([productData])\n        .select()\n        .single();\n\n      if (productError) throw productError;\n\n      // Insert variants if any\n      if (product.variants.length > 0) {\n        const variantsData = product.variants.map(variant => ({\n          id: variant.id,\n          product_id: variant.product_id,\n          name: variant.name,\n          sku: variant.sku,\n          price: variant.price,\n          cost: variant.cost,\n          stock_quantity: variant.stock_quantity,\n          weight: variant.weight,\n          dimensions: variant.dimensions,\n          attributes: variant.attributes,\n          is_active: variant.is_active,\n          created_at: variant.created_at.toISOString(),\n          updated_at: variant.updated_at.toISOString(),\n        }));\n\n        const { error: variantsError } = await supabase\n          .from('product_variants')\n          .insert(variantsData);\n\n        if (variantsError) throw variantsError;\n      }\n\n      // Insert images if any\n      if (product.images.length > 0) {\n        const imagesData = product.images.map(image => ({\n          id: image.id,\n          product_id: image.product_id,\n          url: image.url,\n          alt_text: image.alt_text,\n          sort_order: image.sort_order,\n          is_primary: image.is_primary,\n          created_at: image.created_at.toISOString(),\n        }));\n\n        const { error: imagesError } = await supabase\n          .from('product_images')\n          .insert(imagesData);\n\n        if (imagesError) throw imagesError;\n      }\n\n      // Return the created product\n      return (await this.findById(product.id)) as Product;\n    } catch (error) {\n      console.error('Create product error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update existing product\n   */\n  async update(product: Product): Promise<Product> {\n    try {\n      const productData = {\n        name: product.name,\n        description: product.description,\n        short_description: product.short_description,\n        sku: product.sku,\n        status: product.status,\n        product_type: product.product_type,\n        categories: product.categories,\n        tags: product.tags,\n        weight: product.weight,\n        dimensions: product.dimensions,\n        metadata: product.metadata,\n        seo_title: product.seo_title,\n        seo_description: product.seo_description,\n        seo_keywords: product.seo_keywords,\n        updated_at: product.updated_at.toISOString(),\n      };\n\n      const { error } = await supabase\n        .from('products')\n        .update(productData)\n        .eq('id', product.id);\n\n      if (error) throw error;\n\n      return (await this.findById(product.id)) as Product;\n    } catch (error) {\n      console.error('Update product error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete product\n   */\n  async delete(id: string): Promise<void> {\n    try {\n      // Delete variants first (foreign key constraint)\n      await supabase.from('product_variants').delete().eq('product_id', id);\n\n      // Delete images\n      await supabase.from('product_images').delete().eq('product_id', id);\n\n      // Delete product\n      const { error } = await supabase.from('products').delete().eq('id', id);\n\n      if (error) throw error;\n    } catch (error) {\n      console.error('Delete product error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if SKU exists within tenant\n   */\n  async skuExists(\n    tenantId: string,\n    sku: string,\n    excludeId?: string\n  ): Promise<boolean> {\n    try {\n      let query = supabase\n        .from('products')\n        .select('id')\n        .eq('tenant_id', tenantId)\n        .eq('sku', sku);\n\n      if (excludeId) {\n        query = query.neq('id', excludeId);\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return (data || []).length > 0;\n    } catch (error) {\n      console.error('Check SKU exists error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get product count by status\n   */\n  async getCountByStatus(tenantId: string): Promise<Record<string, number>> {\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .select('status')\n        .eq('tenant_id', tenantId);\n\n      if (error) throw error;\n\n      const counts: Record<string, number> = {\n        active: 0,\n        inactive: 0,\n        draft: 0,\n        archived: 0,\n      };\n\n      (data || []).forEach(item => {\n        counts[item.status] = (counts[item.status] || 0) + 1;\n      });\n\n      return counts;\n    } catch (error) {\n      console.error('Get count by status error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get low stock products\n   */\n  async getLowStockProducts(\n    tenantId: string,\n    threshold: number\n  ): Promise<Product[]> {\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .select(\n          `\n          *,\n          product_variants (*),\n          product_images (*)\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .lte('product_variants.stock_quantity', threshold);\n\n      if (error) throw error;\n\n      return (data || []).map(item => this.mapToEntity(item));\n    } catch (error) {\n      console.error('Get low stock products error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get products created in date range\n   */\n  async getProductsByDateRange(\n    tenantId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<Product[]> {\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .select(\n          `\n          *,\n          product_variants (*),\n          product_images (*)\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .gte('created_at', startDate.toISOString())\n        .lte('created_at', endDate.toISOString())\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      return (data || []).map(item => this.mapToEntity(item));\n    } catch (error) {\n      console.error('Get products by date range error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Bulk update product status\n   */\n  async bulkUpdateStatus(\n    productIds: string[],\n    status: 'active' | 'inactive' | 'draft' | 'archived'\n  ): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from('products')\n        .update({\n          status,\n          updated_at: new Date().toISOString(),\n        })\n        .in('id', productIds);\n\n      if (error) throw error;\n    } catch (error) {\n      console.error('Bulk update status error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Bulk delete products\n   */\n  async bulkDelete(productIds: string[]): Promise<void> {\n    try {\n      // Delete variants first\n      await supabase\n        .from('product_variants')\n        .delete()\n        .in('product_id', productIds);\n\n      // Delete images\n      await supabase\n        .from('product_images')\n        .delete()\n        .in('product_id', productIds);\n\n      // Delete products\n      const { error } = await supabase\n        .from('products')\n        .delete()\n        .in('id', productIds);\n\n      if (error) throw error;\n    } catch (error) {\n      console.error('Bulk delete error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get product statistics\n   */\n  async getStatistics(tenantId: string): Promise<{\n    total: number;\n    active: number;\n    inactive: number;\n    draft: number;\n    archived: number;\n    low_stock: number;\n    out_of_stock: number;\n    total_value: number;\n  }> {\n    try {\n      // Get basic counts\n      const counts = await this.getCountByStatus(tenantId);\n\n      // Get low stock and out of stock counts\n      const lowStockProducts = await this.getLowStockProducts(tenantId, 10);\n      const outOfStockProducts = await this.getLowStockProducts(tenantId, 0);\n\n      // Calculate total value (simplified - sum of all variant prices)\n      const { data, error } = await supabase\n        .from('product_variants')\n        .select('price')\n        .eq('products.tenant_id', tenantId);\n\n      if (error) throw error;\n\n      const totalValue = (data || []).reduce(\n        (sum, variant) => sum + (variant.price || 0),\n        0\n      );\n\n      return {\n        total: Object.values(counts).reduce((sum, count) => sum + count, 0),\n        active: counts.active || 0,\n        inactive: counts.inactive || 0,\n        draft: counts.draft || 0,\n        archived: counts.archived || 0,\n        low_stock: lowStockProducts.length,\n        out_of_stock: outOfStockProducts.length,\n        total_value: totalValue,\n      };\n    } catch (error) {\n      console.error('Get statistics error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Map database record to Product entity\n   */\n  private mapToEntity(data: any): Product {\n    return new Product(\n      data.id,\n      data.tenant_id,\n      data.name,\n      data.description,\n      data.short_description,\n      data.sku,\n      data.status,\n      data.product_type,\n      data.categories || [],\n      data.tags || [],\n      data.weight,\n      data.dimensions,\n      (data.product_variants || []).map((variant: any) => ({\n        ...variant,\n        created_at: new Date(variant.created_at),\n        updated_at: new Date(variant.updated_at),\n      })),\n      (data.product_images || []).map((image: any) => ({\n        ...image,\n        created_at: new Date(image.created_at),\n      })),\n      data.metadata || {},\n      data.seo_title,\n      data.seo_description,\n      data.seo_keywords || [],\n      new Date(data.created_at),\n      new Date(data.updated_at)\n    );\n  }\n}\n","/**\n * Create Product Use Case\n *\n * Handles the business logic for creating new products.\n */\n\nimport { Product } from '../../../domain/entities/Product';\nimport { ProductRepository } from '../../../domain/repositories/ProductRepository';\n\nexport interface CreateProductRequest {\n  tenant_id: string;\n  name: string;\n  description: string;\n  short_description: string;\n  sku: string;\n  status: 'active' | 'inactive' | 'draft' | 'archived';\n  product_type: 'simple' | 'variable' | 'grouped' | 'external';\n  categories: string[];\n  tags: string[];\n  weight?: number;\n  dimensions?: {\n    length: number;\n    width: number;\n    height: number;\n  };\n  seo_title?: string;\n  seo_description?: string;\n  seo_keywords?: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface CreateProductResponse {\n  success: boolean;\n  product?: Product;\n  error?: string;\n}\n\nexport class CreateProductUseCase {\n  constructor(private productRepository: ProductRepository) {}\n\n  async execute(\n    request: CreateProductRequest,\n    userId: string\n  ): Promise<CreateProductResponse> {\n    try {\n      // Validate business rules\n      await this.validateRequest(request);\n\n      // Create product entity\n      const product = new Product(\n        crypto.randomUUID(),\n        request.tenant_id,\n        request.name,\n        request.description,\n        request.short_description,\n        request.sku,\n        request.status,\n        request.product_type,\n        request.categories,\n        request.tags,\n        request.weight,\n        request.dimensions,\n        [], // variants will be added separately\n        [], // images will be added separately\n        request.metadata || {},\n        request.seo_title,\n        request.seo_description,\n        request.seo_keywords || []\n      );\n\n      // Save to repository\n      const savedProduct = await this.productRepository.create(product);\n\n      return {\n        success: true,\n        product: savedProduct,\n      };\n    } catch (error) {\n      console.error('CreateProductUseCase error:', error);\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  private async validateRequest(request: CreateProductRequest): Promise<void> {\n    // Check if SKU already exists\n    const existingProduct = await this.productRepository.skuExists(\n      request.tenant_id,\n      request.sku\n    );\n\n    if (existingProduct) {\n      throw new Error(`Product with SKU ${request.sku} already exists`);\n    }\n\n    // Validate required fields\n    if (!request.name?.trim()) {\n      throw new Error('Product name is required');\n    }\n\n    if (!request.sku?.trim()) {\n      throw new Error('Product SKU is required');\n    }\n\n    if (!request.description?.trim()) {\n      throw new Error('Product description is required');\n    }\n\n    if (!request.short_description?.trim()) {\n      throw new Error('Product short description is required');\n    }\n\n    // Validate SKU format (alphanumeric, hyphens, underscores only)\n    const skuRegex = /^[A-Za-z0-9-_]+$/;\n    if (!skuRegex.test(request.sku)) {\n      throw new Error(\n        'SKU can only contain letters, numbers, hyphens, and underscores'\n      );\n    }\n\n    // Validate dimensions if provided\n    if (request.dimensions) {\n      const { length, width, height } = request.dimensions;\n      if (length <= 0 || width <= 0 || height <= 0) {\n        throw new Error('All dimensions must be positive numbers');\n      }\n    }\n\n    // Validate weight if provided\n    if (request.weight !== undefined && request.weight <= 0) {\n      throw new Error('Weight must be a positive number');\n    }\n  }\n}\n","/**\n * Get Products Use Case\n *\n * Handles the business logic for retrieving products with filtering and pagination.\n */\n\nimport { Product } from '../../../domain/entities/Product';\nimport {\n  ProductRepository,\n  ProductFilters,\n  ProductSortOptions,\n  PaginationOptions,\n  PaginatedResult,\n} from '../../../domain/repositories/ProductRepository';\n\nexport interface GetProductsRequest {\n  tenant_id: string;\n  filters?: Omit<ProductFilters, 'tenant_id'>;\n  sort?: ProductSortOptions;\n  pagination?: PaginationOptions;\n}\n\nexport interface GetProductsResponse {\n  success: boolean;\n  products?: PaginatedResult<Product>;\n  error?: string;\n}\n\nexport class GetProductsUseCase {\n  constructor(private productRepository: ProductRepository) {}\n\n  async execute(request: GetProductsRequest): Promise<GetProductsResponse> {\n    try {\n      // Build filters with tenant_id\n      const filters: ProductFilters = {\n        tenant_id: request.tenant_id,\n        ...request.filters,\n      };\n\n      // Set default pagination if not provided\n      const pagination: PaginationOptions = request.pagination || {\n        page: 1,\n        limit: 20,\n      };\n\n      // Set default sort if not provided\n      const sort: ProductSortOptions = request.sort || {\n        field: 'created_at',\n        direction: 'desc',\n      };\n\n      // Get products from repository\n      const products = await this.productRepository.findMany(\n        filters,\n        sort,\n        pagination\n      );\n\n      return {\n        success: true,\n        products,\n      };\n    } catch (error) {\n      console.error('GetProductsUseCase error:', error);\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n}\n","/**\n * Update Product Use Case\n *\n * Handles the business logic for updating existing products.\n */\n\nimport { Product } from '../../../domain/entities/Product';\nimport { ProductRepository } from '../../../domain/repositories/ProductRepository';\n\nexport interface UpdateProductRequest {\n  id: string;\n  name?: string;\n  description?: string;\n  short_description?: string;\n  sku?: string;\n  status?: 'active' | 'inactive' | 'draft' | 'archived';\n  categories?: string[];\n  tags?: string[];\n  weight?: number;\n  dimensions?: {\n    length: number;\n    width: number;\n    height: number;\n  };\n  seo_title?: string;\n  seo_description?: string;\n  seo_keywords?: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface UpdateProductResponse {\n  success: boolean;\n  product?: Product;\n  error?: string;\n}\n\nexport class UpdateProductUseCase {\n  constructor(private productRepository: ProductRepository) {}\n\n  async execute(\n    request: UpdateProductRequest,\n    userId: string\n  ): Promise<UpdateProductResponse> {\n    try {\n      // Get existing product\n      const existingProduct = await this.productRepository.findById(request.id);\n      if (!existingProduct) {\n        throw new Error('Product not found');\n      }\n\n      // Validate request\n      await this.validateRequest(request, existingProduct);\n\n      // Update product fields\n      if (request.name !== undefined) {\n        existingProduct.updateName(request.name);\n      }\n\n      if (\n        request.description !== undefined ||\n        request.short_description !== undefined\n      ) {\n        existingProduct.updateDescription(\n          request.description || existingProduct.description,\n          request.short_description || existingProduct.short_description\n        );\n      }\n\n      if (request.sku !== undefined) {\n        existingProduct.sku = request.sku;\n        existingProduct.updated_at = new Date();\n      }\n\n      if (request.status !== undefined) {\n        existingProduct.updateStatus(request.status);\n      }\n\n      if (request.categories !== undefined) {\n        existingProduct.categories = request.categories;\n        existingProduct.updated_at = new Date();\n      }\n\n      if (request.tags !== undefined) {\n        existingProduct.tags = request.tags;\n        existingProduct.updated_at = new Date();\n      }\n\n      if (request.weight !== undefined) {\n        existingProduct.weight = request.weight;\n        existingProduct.updated_at = new Date();\n      }\n\n      if (request.dimensions !== undefined) {\n        existingProduct.dimensions = request.dimensions;\n        existingProduct.updated_at = new Date();\n      }\n\n      if (request.seo_title !== undefined) {\n        existingProduct.seo_title = request.seo_title;\n        existingProduct.updated_at = new Date();\n      }\n\n      if (request.seo_description !== undefined) {\n        existingProduct.seo_description = request.seo_description;\n        existingProduct.updated_at = new Date();\n      }\n\n      if (request.seo_keywords !== undefined) {\n        existingProduct.seo_keywords = request.seo_keywords;\n        existingProduct.updated_at = new Date();\n      }\n\n      if (request.metadata !== undefined) {\n        existingProduct.metadata = request.metadata;\n        existingProduct.updated_at = new Date();\n      }\n\n      // Save updated product\n      const updatedProduct =\n        await this.productRepository.update(existingProduct);\n\n      return {\n        success: true,\n        product: updatedProduct,\n      };\n    } catch (error) {\n      console.error('UpdateProductUseCase error:', error);\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  private async validateRequest(\n    request: UpdateProductRequest,\n    existingProduct: Product\n  ): Promise<void> {\n    // Validate SKU if provided\n    if (request.sku !== undefined) {\n      if (!request.sku.trim()) {\n        throw new Error('Product SKU is required');\n      }\n\n      // Check if SKU already exists (excluding current product)\n      const skuExists = await this.productRepository.skuExists(\n        existingProduct.tenant_id,\n        request.sku,\n        existingProduct.id\n      );\n\n      if (skuExists) {\n        throw new Error(`Product with SKU ${request.sku} already exists`);\n      }\n\n      // Validate SKU format\n      const skuRegex = /^[A-Za-z0-9-_]+$/;\n      if (!skuRegex.test(request.sku)) {\n        throw new Error(\n          'SKU can only contain letters, numbers, hyphens, and underscores'\n        );\n      }\n    }\n\n    // Validate name if provided\n    if (request.name !== undefined && !request.name.trim()) {\n      throw new Error('Product name cannot be empty');\n    }\n\n    // Validate description if provided\n    if (request.description !== undefined && !request.description.trim()) {\n      throw new Error('Product description cannot be empty');\n    }\n\n    // Validate short description if provided\n    if (\n      request.short_description !== undefined &&\n      !request.short_description.trim()\n    ) {\n      throw new Error('Product short description cannot be empty');\n    }\n\n    // Validate dimensions if provided\n    if (request.dimensions) {\n      const { length, width, height } = request.dimensions;\n      if (length <= 0 || width <= 0 || height <= 0) {\n        throw new Error('All dimensions must be positive numbers');\n      }\n    }\n\n    // Validate weight if provided\n    if (request.weight !== undefined && request.weight <= 0) {\n      throw new Error('Weight must be a positive number');\n    }\n  }\n}\n","/**\n * Delete Product Use Case\n *\n * Handles the business logic for deleting products.\n */\n\nimport { ProductRepository } from '../../../domain/repositories/ProductRepository';\n\nexport interface DeleteProductRequest {\n  id: string;\n  force?: boolean; // Force delete even if product has orders\n}\n\nexport interface DeleteProductResponse {\n  success: boolean;\n  error?: string;\n}\n\nexport class DeleteProductUseCase {\n  constructor(private productRepository: ProductRepository) {}\n\n  async execute(\n    request: DeleteProductRequest,\n    userId: string\n  ): Promise<DeleteProductResponse> {\n    try {\n      // Check if product exists\n      const existingProduct = await this.productRepository.findById(request.id);\n      if (!existingProduct) {\n        throw new Error('Product not found');\n      }\n\n      // Business rules validation\n      await this.validateDeletion(existingProduct, request.force);\n\n      // Delete product\n      await this.productRepository.delete(request.id);\n\n      return {\n        success: true,\n      };\n    } catch (error) {\n      console.error('DeleteProductUseCase error:', error);\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  private async validateDeletion(\n    product: any, // Product entity\n    force?: boolean\n  ): Promise<void> {\n    // Check if product is active and has orders (if orders system exists)\n    if (product.status === 'active' && !force) {\n      // TODO: Check if product has associated orders\n      // For now, we'll allow deletion but log a warning\n      console.warn(`Deleting active product ${product.id} without force flag`);\n    }\n\n    // Additional business rules can be added here\n    // For example:\n    // - Check if product is part of any active campaigns\n    // - Check if product has inventory in transit\n    // - Check if product is featured in any marketing materials\n  }\n}\n","/**\n * Product Service\n *\n * Application layer service that coordinates use cases and provides\n * a clean interface for the presentation layer.\n */\n\nimport { SupabaseProductRepository } from '../database/supabase/repositories/SupabaseProductRepository';\nimport {\n  CreateProductUseCase,\n  CreateProductRequest,\n} from '../../application/use-cases/product/CreateProductUseCase';\nimport {\n  GetProductsUseCase,\n  GetProductsRequest,\n} from '../../application/use-cases/product/GetProductsUseCase';\nimport {\n  UpdateProductUseCase,\n  UpdateProductRequest,\n} from '../../application/use-cases/product/UpdateProductUseCase';\nimport {\n  DeleteProductUseCase,\n  DeleteProductRequest,\n} from '../../application/use-cases/product/DeleteProductUseCase';\nimport { Product } from '../../domain/entities/Product';\nimport {\n  ProductFilters,\n  ProductSortOptions,\n  PaginationOptions,\n  PaginatedResult,\n} from '../../domain/repositories/ProductRepository';\n\nexport class ProductService {\n  private productRepository: SupabaseProductRepository;\n  private createProductUseCase: CreateProductUseCase;\n  private getProductsUseCase: GetProductsUseCase;\n  private updateProductUseCase: UpdateProductUseCase;\n  private deleteProductUseCase: DeleteProductUseCase;\n\n  constructor() {\n    this.productRepository = new SupabaseProductRepository();\n    this.createProductUseCase = new CreateProductUseCase(\n      this.productRepository\n    );\n    this.getProductsUseCase = new GetProductsUseCase(this.productRepository);\n    this.updateProductUseCase = new UpdateProductUseCase(\n      this.productRepository\n    );\n    this.deleteProductUseCase = new DeleteProductUseCase(\n      this.productRepository\n    );\n  }\n\n  /**\n   * Create a new product\n   */\n  async createProduct(request: CreateProductRequest, userId: string) {\n    return await this.createProductUseCase.execute(request, userId);\n  }\n\n  /**\n   * Get products with filtering and pagination\n   */\n  async getProducts(request: GetProductsRequest) {\n    // Super admin için tüm ürünleri getir\n    if (request.tenant_id === 'all') {\n      return await this.getAllProducts(request);\n    }\n    return await this.getProductsUseCase.execute(request);\n  }\n\n  /**\n   * Get all products (for super admin)\n   */\n  private async getAllProducts(request: Omit<GetProductsRequest, 'tenant_id'>) {\n    try {\n      const filters: ProductFilters = {\n        ...request.filters,\n      };\n\n      const pagination: PaginationOptions = request.pagination || {\n        page: 1,\n        limit: 20,\n      };\n\n      const sort: ProductSortOptions = request.sort || {\n        field: 'created_at',\n        direction: 'desc',\n      };\n\n      const products = await this.productRepository.findMany(\n        filters,\n        sort,\n        pagination\n      );\n\n      return {\n        success: true,\n        products,\n      };\n    } catch (error) {\n      console.error('Get all products error:', error);\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  /**\n   * Get product by ID\n   */\n  async getProductById(id: string): Promise<Product | null> {\n    try {\n      return await this.productRepository.findById(id);\n    } catch (error) {\n      console.error('Get product by ID error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update product\n   */\n  async updateProduct(request: UpdateProductRequest, userId: string) {\n    return await this.updateProductUseCase.execute(request, userId);\n  }\n\n  /**\n   * Delete product\n   */\n  async deleteProduct(request: DeleteProductRequest, userId: string) {\n    return await this.deleteProductUseCase.execute(request, userId);\n  }\n\n  /**\n   * Search products\n   */\n  async searchProducts(\n    tenantId: string,\n    query: string,\n    sort?: ProductSortOptions,\n    pagination?: PaginationOptions\n  ): Promise<PaginatedResult<Product>> {\n    try {\n      return await this.productRepository.search(\n        tenantId,\n        query,\n        sort,\n        pagination\n      );\n    } catch (error) {\n      console.error('Search products error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get products by category\n   */\n  async getProductsByCategory(\n    tenantId: string,\n    categoryId: string,\n    sort?: ProductSortOptions,\n    pagination?: PaginationOptions\n  ): Promise<PaginatedResult<Product>> {\n    try {\n      return await this.productRepository.findByCategory(\n        tenantId,\n        categoryId,\n        sort,\n        pagination\n      );\n    } catch (error) {\n      console.error('Get products by category error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get low stock products\n   */\n  async getLowStockProducts(\n    tenantId: string,\n    threshold: number = 10\n  ): Promise<Product[]> {\n    try {\n      return await this.productRepository.getLowStockProducts(\n        tenantId,\n        threshold\n      );\n    } catch (error) {\n      console.error('Get low stock products error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Bulk update product status\n   */\n  async bulkUpdateStatus(\n    productIds: string[],\n    status: 'active' | 'inactive' | 'draft' | 'archived'\n  ): Promise<void> {\n    try {\n      return await this.productRepository.bulkUpdateStatus(productIds, status);\n    } catch (error) {\n      console.error('Bulk update status error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Bulk delete products\n   */\n  async bulkDeleteProducts(productIds: string[]): Promise<void> {\n    try {\n      return await this.productRepository.bulkDelete(productIds);\n    } catch (error) {\n      console.error('Bulk delete products error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get product statistics\n   */\n  async getProductStatistics(tenantId: string) {\n    try {\n      return await this.productRepository.getStatistics(tenantId);\n    } catch (error) {\n      console.error('Get product statistics error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if SKU exists\n   */\n  async checkSkuExists(\n    tenantId: string,\n    sku: string,\n    excludeId?: string\n  ): Promise<boolean> {\n    try {\n      return await this.productRepository.skuExists(tenantId, sku, excludeId);\n    } catch (error) {\n      console.error('Check SKU exists error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get products by date range\n   */\n  async getProductsByDateRange(\n    tenantId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<Product[]> {\n    try {\n      return await this.productRepository.getProductsByDateRange(\n        tenantId,\n        startDate,\n        endDate\n      );\n    } catch (error) {\n      console.error('Get products by date range error:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const productService = new ProductService();\n","import { useState, useEffect } from 'react';\nimport { productService } from '../../../../infrastructure/services/ProductService';\nimport { Product } from '../../../../domain/entities/Product';\nimport { CreateProductRequest } from '../../../../application/use-cases/product/CreateProductUseCase';\nimport { UpdateProductRequest } from '../../../../application/use-cases/product/UpdateProductUseCase';\nimport toast from 'react-hot-toast';\n\ninterface ProductModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  editingProduct?: Product | null;\n  tenantId?: string;\n}\n\nexport default function ProductModal({\n  isOpen,\n  onClose,\n  onSuccess,\n  editingProduct,\n  tenantId,\n}: ProductModalProps) {\n  const [loading, setLoading] = useState(false);\n\n  // Super admin için varsayılan tenant ID - gerçek UUID kullan\n  const defaultTenantId = '00000000-0000-0000-0000-000000000001';\n\n  const [formData, setFormData] = useState<CreateProductRequest>({\n    tenant_id: tenantId || defaultTenantId,\n    name: '',\n    description: '',\n    short_description: '',\n    sku: '',\n    status: 'draft',\n    product_type: 'simple',\n    categories: [],\n    tags: [],\n    weight: undefined,\n    dimensions: undefined,\n    seo_title: '',\n    seo_description: '',\n    seo_keywords: [],\n    metadata: {},\n  });\n\n  // Form reset\n  useEffect(() => {\n    if (isOpen) {\n      if (editingProduct) {\n        setFormData({\n          tenant_id: editingProduct.tenant_id,\n          name: editingProduct.name,\n          description: editingProduct.description,\n          short_description: editingProduct.short_description,\n          sku: editingProduct.sku,\n          status: editingProduct.status,\n          product_type: editingProduct.product_type,\n          categories: editingProduct.categories,\n          tags: editingProduct.tags,\n          weight: editingProduct.weight,\n          dimensions: editingProduct.dimensions,\n          seo_title: editingProduct.seo_title || '',\n          seo_description: editingProduct.seo_description || '',\n          seo_keywords: editingProduct.seo_keywords,\n          metadata: editingProduct.metadata,\n        });\n      } else {\n        setFormData({\n          tenant_id: tenantId || defaultTenantId,\n          name: '',\n          description: '',\n          short_description: '',\n          sku: '',\n          status: 'draft',\n          product_type: 'simple',\n          categories: [],\n          tags: [],\n          weight: undefined,\n          dimensions: undefined,\n          seo_title: '',\n          seo_description: '',\n          seo_keywords: [],\n          metadata: {},\n        });\n      }\n    }\n  }, [isOpen, editingProduct, tenantId]);\n\n  // Form submit\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    console.log('Form submit başladı:', {\n      formData,\n      tenantId,\n      editingProduct: !!editingProduct,\n      authToken: localStorage.getItem('supabase.auth.token'),\n    });\n\n    try {\n      if (editingProduct) {\n        // Update existing product\n        const updateRequest: UpdateProductRequest = {\n          id: editingProduct.id,\n          name: formData.name,\n          description: formData.description,\n          short_description: formData.short_description,\n          sku: formData.sku,\n          status: formData.status,\n          categories: formData.categories,\n          tags: formData.tags,\n          weight: formData.weight,\n          dimensions: formData.dimensions,\n          seo_title: formData.seo_title,\n          seo_description: formData.seo_description,\n          seo_keywords: formData.seo_keywords,\n          metadata: formData.metadata,\n        };\n\n        const response = await productService.updateProduct(\n          updateRequest,\n          'current-user'\n        );\n        if (response.success) {\n          toast.success('Ürün başarıyla güncellendi');\n        } else {\n          toast.error(response.error || 'Ürün güncellenirken hata oluştu');\n        }\n      } else {\n        // Create new product\n        const response = await productService.createProduct(\n          formData,\n          'current-user'\n        );\n        if (response.success) {\n          toast.success('Ürün başarıyla oluşturuldu');\n        } else {\n          toast.error(response.error || 'Ürün oluşturulurken hata oluştu');\n        }\n      }\n\n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('Product save error:', error);\n      toast.error('Ürün kaydedilirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Form input change\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  // Array field helpers\n  const handleArrayChange = (\n    field: 'categories' | 'tags' | 'seo_keywords',\n    value: string\n  ) => {\n    const array = value\n      .split(',')\n      .map(item => item.trim())\n      .filter(item => item);\n    setFormData(prev => ({\n      ...prev,\n      [field]: array,\n    }));\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-gradient-to-br from-gray-800 to-gray-900 border border-white/10 rounded-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"p-6 border-b border-white/10\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-2xl font-bold text-white\">\n              {editingProduct ? 'Ürün Düzenle' : 'Yeni Ürün'}\n            </h3>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-white transition-colors\"\n            >\n              <i className=\"ri-close-line text-2xl\"></i>\n            </button>\n          </div>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Product Name */}\n            <div className=\"md:col-span-2\">\n              <label className=\"block text-white font-medium mb-2\">\n                Ürün Adı *\n              </label>\n              <input\n                type=\"text\"\n                required\n                value={formData.name}\n                onChange={e => handleInputChange('name', e.target.value)}\n                className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n                placeholder=\"Ürün adını girin\"\n              />\n            </div>\n\n            {/* SKU */}\n            <div>\n              <label className=\"block text-white font-medium mb-2\">SKU *</label>\n              <input\n                type=\"text\"\n                required\n                value={formData.sku}\n                onChange={e => handleInputChange('sku', e.target.value)}\n                className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors font-mono\"\n                placeholder=\"ÜRÜN-SKU-001\"\n              />\n            </div>\n\n            {/* Product Type */}\n            <div>\n              <label className=\"block text-white font-medium mb-2\">\n                Ürün Tipi\n              </label>\n              <select\n                value={formData.product_type}\n                onChange={e =>\n                  handleInputChange('product_type', e.target.value)\n                }\n                className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white focus:outline-none focus:border-blue-400 transition-colors\"\n              >\n                <option value=\"simple\">Basit</option>\n                <option value=\"variable\">Varyantlı</option>\n                <option value=\"grouped\">Gruplu</option>\n                <option value=\"external\">Harici</option>\n              </select>\n            </div>\n\n            {/* Status */}\n            <div>\n              <label className=\"block text-white font-medium mb-2\">Durum</label>\n              <select\n                value={formData.status}\n                onChange={e => handleInputChange('status', e.target.value)}\n                className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white focus:outline-none focus:border-blue-400 transition-colors\"\n              >\n                <option value=\"draft\">Taslak</option>\n                <option value=\"active\">Aktif</option>\n                <option value=\"inactive\">Pasif</option>\n                <option value=\"archived\">Arşiv</option>\n              </select>\n            </div>\n\n            {/* Weight */}\n            <div>\n              <label className=\"block text-white font-medium mb-2\">\n                Ağırlık (kg)\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={formData.weight || ''}\n                onChange={e =>\n                  handleInputChange(\n                    'weight',\n                    e.target.value ? parseFloat(e.target.value) : undefined\n                  )\n                }\n                className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n                placeholder=\"0.5\"\n              />\n            </div>\n          </div>\n\n          {/* Description */}\n          <div>\n            <label className=\"block text-white font-medium mb-2\">\n              Kısa Açıklama *\n            </label>\n            <textarea\n              required\n              value={formData.short_description}\n              onChange={e =>\n                handleInputChange('short_description', e.target.value)\n              }\n              className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n              placeholder=\"Ürünün kısa açıklaması...\"\n              rows={2}\n            />\n          </div>\n\n          {/* Full Description */}\n          <div>\n            <label className=\"block text-white font-medium mb-2\">\n              Detaylı Açıklama *\n            </label>\n            <textarea\n              required\n              value={formData.description}\n              onChange={e => handleInputChange('description', e.target.value)}\n              className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n              placeholder=\"Ürünün detaylı açıklaması...\"\n              rows={4}\n            />\n          </div>\n\n          {/* Categories */}\n          <div>\n            <label className=\"block text-white font-medium mb-2\">\n              Kategoriler\n            </label>\n            <input\n              type=\"text\"\n              value={formData.categories.join(', ')}\n              onChange={e => handleArrayChange('categories', e.target.value)}\n              className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n              placeholder=\"Elektronik, Telefon, Aksesuar\"\n            />\n          </div>\n\n          {/* Tags */}\n          <div>\n            <label className=\"block text-white font-medium mb-2\">\n              Etiketler\n            </label>\n            <input\n              type=\"text\"\n              value={formData.tags.join(', ')}\n              onChange={e => handleArrayChange('tags', e.target.value)}\n              className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n              placeholder=\"popüler, indirim, yeni\"\n            />\n          </div>\n\n          {/* SEO Title */}\n          <div>\n            <label className=\"block text-white font-medium mb-2\">\n              SEO Başlığı\n            </label>\n            <input\n              type=\"text\"\n              value={formData.seo_title}\n              onChange={e => handleInputChange('seo_title', e.target.value)}\n              className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n              placeholder=\"SEO için başlık...\"\n            />\n          </div>\n\n          {/* SEO Description */}\n          <div>\n            <label className=\"block text-white font-medium mb-2\">\n              SEO Açıklaması\n            </label>\n            <textarea\n              value={formData.seo_description}\n              onChange={e =>\n                handleInputChange('seo_description', e.target.value)\n              }\n              className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n              placeholder=\"SEO için açıklama...\"\n              rows={2}\n            />\n          </div>\n\n          {/* SEO Keywords */}\n          <div>\n            <label className=\"block text-white font-medium mb-2\">\n              SEO Anahtar Kelimeler\n            </label>\n            <input\n              type=\"text\"\n              value={formData.seo_keywords.join(', ')}\n              onChange={e => handleArrayChange('seo_keywords', e.target.value)}\n              className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n              placeholder=\"telefon, akıllı telefon, iphone\"\n            />\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex space-x-4 pt-4\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"flex-1 bg-white/10 hover:bg-white/20 border border-white/20 text-white px-6 py-3 rounded-xl font-medium transition-all duration-300\"\n            >\n              İptal\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"flex-1 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 disabled:opacity-50 disabled:cursor-not-allowed text-white px-6 py-3 rounded-xl font-medium transition-all duration-300\"\n            >\n              {loading ? (\n                <div className=\"flex items-center justify-center\">\n                  <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                  {editingProduct ? 'Güncelleniyor...' : 'Oluşturuluyor...'}\n                </div>\n              ) : editingProduct ? (\n                'Güncelle'\n              ) : (\n                'Oluştur'\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { productService } from '../../../infrastructure/services/ProductService';\nimport { Product } from '../../../domain/entities/Product';\nimport ProductModal from './components/ProductModal';\nimport toast from 'react-hot-toast';\n\nexport default function ProductManagement() {\n  const { userProfile } = useAuth();\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterType, setFilterType] = useState('all');\n  const [selectedProducts, setSelectedProducts] = useState<string[]>([]);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  // Products'ları yükle\n  const loadProducts = async () => {\n    // Super admin için tüm ürünleri göster, tenant admin için sadece kendi ürünlerini\n    const tenantId =\n      userProfile?.role === 'super_admin' ? undefined : userProfile?.tenant_id;\n\n    if (!tenantId && userProfile?.role !== 'super_admin') {\n      console.log('No tenant_id found for user:', userProfile);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const response = await productService.getProducts({\n        tenant_id: tenantId || 'all', // Super admin için 'all'\n        filters: {\n          status: filterStatus === 'all' ? undefined : (filterStatus as any),\n          product_type: filterType === 'all' ? undefined : (filterType as any),\n          search: searchTerm || undefined,\n        },\n        pagination: {\n          page: currentPage,\n          limit: 20,\n        },\n      });\n\n      if (response.success && response.products) {\n        setProducts(response.products.data);\n        setTotalPages(response.products.totalPages);\n      } else {\n        toast.error('Ürünler yüklenirken hata oluştu');\n      }\n    } catch (error) {\n      console.error('Product yükleme hatası:', error);\n      toast.error('Ürünler yüklenirken hata oluştu');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // İlk yükleme ve filtre değişikliklerinde yükle\n  useEffect(() => {\n    loadProducts();\n  }, [\n    userProfile?.tenant_id,\n    searchTerm,\n    filterStatus,\n    filterType,\n    currentPage,\n  ]);\n\n  // Filtreleme\n  const filteredProducts = products.filter(product => {\n    const matchesSearch =\n      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.sku.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus =\n      filterStatus === 'all' || product.status === filterStatus;\n    const matchesType =\n      filterType === 'all' || product.product_type === filterType;\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  // Durum rengi\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500/20 text-green-400';\n      case 'inactive':\n        return 'bg-gray-500/20 text-gray-400';\n      case 'draft':\n        return 'bg-yellow-500/20 text-yellow-400';\n      case 'archived':\n        return 'bg-red-500/20 text-red-400';\n      default:\n        return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  // Durum metni\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'Aktif';\n      case 'inactive':\n        return 'Pasif';\n      case 'draft':\n        return 'Taslak';\n      case 'archived':\n        return 'Arşiv';\n      default:\n        return 'Bilinmiyor';\n    }\n  };\n\n  // Tip rengi\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'simple':\n        return 'bg-blue-500/20 text-blue-400';\n      case 'variable':\n        return 'bg-purple-500/20 text-purple-400';\n      case 'grouped':\n        return 'bg-orange-500/20 text-orange-400';\n      case 'external':\n        return 'bg-pink-500/20 text-pink-400';\n      default:\n        return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  // Tip metni\n  const getTypeText = (type: string) => {\n    switch (type) {\n      case 'simple':\n        return 'Basit';\n      case 'variable':\n        return 'Varyantlı';\n      case 'grouped':\n        return 'Gruplu';\n      case 'external':\n        return 'Harici';\n      default:\n        return 'Bilinmiyor';\n    }\n  };\n\n  // Ürün seçimi\n  const toggleProductSelection = (productId: string) => {\n    setSelectedProducts(prev =>\n      prev.includes(productId)\n        ? prev.filter(id => id !== productId)\n        : [...prev, productId]\n    );\n  };\n\n  // Toplu işlemler\n  const handleBulkStatusUpdate = async (status: string) => {\n    try {\n      await productService.bulkUpdateStatus(selectedProducts, status as any);\n      toast.success(`${selectedProducts.length} ürün durumu güncellendi`);\n      setSelectedProducts([]);\n      loadProducts();\n    } catch (error) {\n      console.error('Toplu durum güncelleme hatası:', error);\n      toast.error('Durum güncellenirken hata oluştu');\n    }\n  };\n\n  // Ürün silme\n  const handleDeleteProduct = async (productId: string) => {\n    if (!confirm('Bu ürünü silmek istediğinizden emin misiniz?')) {\n      return;\n    }\n\n    try {\n      await productService.deleteProduct(\n        { id: productId },\n        userProfile?.id || ''\n      );\n      toast.success('Ürün başarıyla silindi');\n      loadProducts();\n    } catch (error) {\n      console.error('Product silme hatası:', error);\n      toast.error('Ürün silinirken hata oluştu');\n    }\n  };\n\n  // Loading durumu\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-purple-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-white text-lg\">Ürünler yükleniyor...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\">\n      {/* Animated Background */}\n      <div className=\"fixed inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-purple-500/20 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500/20 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-cyan-500/10 rounded-full blur-3xl animate-pulse delay-2000\"></div>\n      </div>\n\n      <div className=\"relative z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-blue-600/20 to-purple-600/20 backdrop-blur-sm border border-white/10 rounded-2xl p-6 mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-white mb-2\">\n                  Ürün Yönetimi\n                </h1>\n                <p className=\"text-gray-300\">\n                  Ürünlerinizi görüntüleyin ve yönetin\n                </p>\n              </div>\n              <button\n                onClick={() => setShowCreateModal(true)}\n                className=\"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-6 py-3 rounded-xl font-medium transition-all duration-300 cursor-pointer\"\n              >\n                <i className=\"ri-add-line mr-2\"></i>\n                Yeni Ürün\n              </button>\n            </div>\n          </div>\n\n          {/* Filters */}\n          <div className=\"bg-black/20 backdrop-blur-sm border border-white/10 rounded-2xl p-6 mb-8\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              {/* Search */}\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Ürün ara...\"\n                    value={searchTerm}\n                    onChange={e => setSearchTerm(e.target.value)}\n                    className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 pl-12 text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 transition-colors\"\n                  />\n                  <i className=\"ri-search-line absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400\"></i>\n                </div>\n              </div>\n\n              {/* Status Filter */}\n              <div className=\"md:w-48\">\n                <select\n                  value={filterStatus}\n                  onChange={e => setFilterStatus(e.target.value)}\n                  className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white focus:outline-none focus:border-blue-400 transition-colors pr-8\"\n                >\n                  <option value=\"all\">Tüm Durumlar</option>\n                  <option value=\"active\">Aktif</option>\n                  <option value=\"inactive\">Pasif</option>\n                  <option value=\"draft\">Taslak</option>\n                  <option value=\"archived\">Arşiv</option>\n                </select>\n              </div>\n\n              {/* Type Filter */}\n              <div className=\"md:w-48\">\n                <select\n                  value={filterType}\n                  onChange={e => setFilterType(e.target.value)}\n                  className=\"w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white focus:outline-none focus:border-blue-400 transition-colors pr-8\"\n                >\n                  <option value=\"all\">Tüm Tipler</option>\n                  <option value=\"simple\">Basit</option>\n                  <option value=\"variable\">Varyantlı</option>\n                  <option value=\"grouped\">Gruplu</option>\n                  <option value=\"external\">Harici</option>\n                </select>\n              </div>\n\n              {/* Bulk Actions */}\n              {selectedProducts.length > 0 && (\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={() => handleBulkStatusUpdate('active')}\n                    className=\"bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 px-4 py-3 rounded-xl transition-colors cursor-pointer\"\n                  >\n                    <i className=\"ri-check-line mr-2\"></i>\n                    Aktifleştir\n                  </button>\n                  <button\n                    onClick={() => handleBulkStatusUpdate('inactive')}\n                    className=\"bg-gray-500/20 hover:bg-gray-500/30 border border-gray-500/50 text-gray-400 px-4 py-3 rounded-xl transition-colors cursor-pointer\"\n                  >\n                    <i className=\"ri-pause-line mr-2\"></i>\n                    Pasifleştir\n                  </button>\n                  <button\n                    onClick={() => handleBulkStatusUpdate('archived')}\n                    className=\"bg-red-500/20 hover:bg-red-500/30 border border-red-500/50 text-red-400 px-4 py-3 rounded-xl transition-colors cursor-pointer\"\n                  >\n                    <i className=\"ri-archive-line mr-2\"></i>\n                    Arşivle\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Products Table */}\n          <div className=\"bg-black/20 backdrop-blur-sm border border-white/10 rounded-2xl overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-white/5 border-b border-white/10\">\n                  <tr>\n                    <th className=\"text-left p-4\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\n                        onChange={e => {\n                          if (e.target.checked) {\n                            setSelectedProducts(\n                              filteredProducts.map(product => product.id)\n                            );\n                          } else {\n                            setSelectedProducts([]);\n                          }\n                        }}\n                      />\n                    </th>\n                    <th className=\"text-left p-4 text-gray-300 font-medium\">\n                      Ürün\n                    </th>\n                    <th className=\"text-left p-4 text-gray-300 font-medium\">\n                      SKU\n                    </th>\n                    <th className=\"text-left p-4 text-gray-300 font-medium\">\n                      Tip\n                    </th>\n                    <th className=\"text-left p-4 text-gray-300 font-medium\">\n                      Durum\n                    </th>\n                    <th className=\"text-left p-4 text-gray-300 font-medium\">\n                      Stok\n                    </th>\n                    <th className=\"text-left p-4 text-gray-300 font-medium\">\n                      Fiyat\n                    </th>\n                    <th className=\"text-left p-4 text-gray-300 font-medium\">\n                      Oluşturulma\n                    </th>\n                    <th className=\"text-left p-4 text-gray-300 font-medium\">\n                      İşlemler\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredProducts.map(product => (\n                    <tr\n                      key={product.id}\n                      className=\"border-b border-white/5 hover:bg-white/5 transition-colors\"\n                    >\n                      <td className=\"p-4\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedProducts.includes(product.id)}\n                          onChange={() => toggleProductSelection(product.id)}\n                          className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\n                        />\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-12 h-12 rounded-lg overflow-hidden bg-gray-700 flex items-center justify-center\">\n                            {product.getPrimaryImageUrl() ? (\n                              <img\n                                src={product.getPrimaryImageUrl() || ''}\n                                alt={product.name}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            ) : (\n                              <i className=\"ri-image-line text-gray-400 text-xl\"></i>\n                            )}\n                          </div>\n                          <div>\n                            <div className=\"text-white font-medium\">\n                              {product.name}\n                            </div>\n                            <div className=\"text-gray-400 text-sm line-clamp-1\">\n                              {product.short_description}\n                            </div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"p-4 text-gray-300 font-mono text-sm\">\n                        {product.sku}\n                      </td>\n                      <td className=\"p-4\">\n                        <span\n                          className={`px-2 py-1 rounded-full text-sm ${getTypeColor(product.product_type)}`}\n                        >\n                          {getTypeText(product.product_type)}\n                        </span>\n                      </td>\n                      <td className=\"p-4\">\n                        <span\n                          className={`px-2 py-1 rounded-full text-sm ${getStatusColor(product.status)}`}\n                        >\n                          {getStatusText(product.status)}\n                        </span>\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"text-gray-300\">\n                          {product.getTotalStock()}\n                          {product.getTotalStock() <= 10 && (\n                            <span className=\"text-red-400 text-xs ml-1\">\n                              (Düşük)\n                            </span>\n                          )}\n                        </div>\n                      </td>\n                      <td className=\"p-4 text-gray-300\">\n                        {product.getMinPrice() && product.getMaxPrice()\n                          ? product.getMinPrice() === product.getMaxPrice()\n                            ? `₺${product.getMinPrice()}`\n                            : `₺${product.getMinPrice()} - ₺${product.getMaxPrice()}`\n                          : '-'}\n                      </td>\n                      <td className=\"p-4 text-gray-400 text-sm\">\n                        {new Date(product.created_at).toLocaleDateString(\n                          'tr-TR'\n                        )}\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex space-x-2\">\n                          <button\n                            onClick={() => setEditingProduct(product)}\n                            className=\"text-blue-400 hover:text-blue-300 transition-colors cursor-pointer\"\n                            title=\"Düzenle\"\n                          >\n                            <i className=\"ri-edit-line\"></i>\n                          </button>\n                          <button\n                            onClick={() => handleDeleteProduct(product.id)}\n                            className=\"text-red-400 hover:text-red-300 transition-colors cursor-pointer\"\n                            title=\"Sil\"\n                          >\n                            <i className=\"ri-delete-bin-line\"></i>\n                          </button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Pagination */}\n            <div className=\"p-4 border-t border-white/10 flex items-center justify-between\">\n              <div className=\"text-gray-400 text-sm\">\n                {filteredProducts.length} ürün gösteriliyor\n              </div>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                  disabled={currentPage === 1}\n                  className=\"bg-white/10 hover:bg-white/20 disabled:opacity-50 disabled:cursor-not-allowed text-gray-300 px-3 py-2 rounded-lg transition-colors cursor-pointer\"\n                >\n                  <i className=\"ri-arrow-left-line\"></i>\n                </button>\n                <span className=\"bg-blue-500 text-white px-3 py-2 rounded-lg\">\n                  {currentPage}\n                </span>\n                <button\n                  onClick={() =>\n                    setCurrentPage(Math.min(totalPages, currentPage + 1))\n                  }\n                  disabled={currentPage === totalPages}\n                  className=\"bg-white/10 hover:bg-white/20 disabled:opacity-50 disabled:cursor-not-allowed text-gray-300 px-3 py-2 rounded-lg transition-colors cursor-pointer\"\n                >\n                  <i className=\"ri-arrow-right-line\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Product Modal */}\n      <ProductModal\n        isOpen={showCreateModal || !!editingProduct}\n        onClose={() => {\n          setShowCreateModal(false);\n          setEditingProduct(null);\n        }}\n        onSuccess={() => {\n          loadProducts();\n        }}\n        editingProduct={editingProduct}\n        tenantId={userProfile?.tenant_id || undefined}\n      />\n    </div>\n  );\n}\n"],"names":["Product","id","tenant_id","name","description","short_description","sku","status","product_type","categories","tags","weight","dimensions","variants","images","metadata","seo_title","seo_description","seo_keywords","created_at","updated_at","variant","index","arr","v","newVariant","variantId","quantity","price","image","newImage","imageId","img","total","action","changedBy","oldValues","newValues","reason","SupabaseProductRepository","data","error","supabase","tenantId","filters","sort","pagination","query","from","to","count","products","item","totalPages","categoryId","product","productData","productResult","productError","variantsData","variantsError","imagesData","imagesError","excludeId","counts","threshold","startDate","endDate","productIds","lowStockProducts","outOfStockProducts","totalValue","sum","CreateProductUseCase","productRepository","request","userId","length","width","height","GetProductsUseCase","UpdateProductUseCase","existingProduct","DeleteProductUseCase","force","ProductService","productService","ProductModal","isOpen","onClose","onSuccess","editingProduct","loading","setLoading","useState","defaultTenantId","formData","setFormData","useEffect","handleSubmit","e","updateRequest","response","toast","handleInputChange","field","value","prev","handleArrayChange","array","jsxs","jsx","ProductManagement","userProfile","useAuth","setProducts","searchTerm","setSearchTerm","filterStatus","setFilterStatus","filterType","setFilterType","selectedProducts","setSelectedProducts","showCreateModal","setShowCreateModal","setEditingProduct","currentPage","setCurrentPage","setTotalPages","loadProducts","filteredProducts","matchesSearch","matchesStatus","matchesType","getStatusColor","getStatusText","getTypeColor","type","getTypeText","toggleProductSelection","productId","handleBulkStatusUpdate","handleDeleteProduct"],"mappings":"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"}