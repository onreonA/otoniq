-- ================================================
-- Workflow Outputs Table
-- Stores outputs generated by N8N workflows
-- ================================================

-- Create workflow_outputs table
CREATE TABLE IF NOT EXISTS workflow_outputs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID NOT NULL,
  workflow_id UUID REFERENCES n8n_workflows(id) ON DELETE CASCADE,
  execution_id UUID REFERENCES n8n_executions(id) ON DELETE CASCADE,
  
  -- Output metadata
  output_type TEXT NOT NULL CHECK (output_type IN ('report', 'image', 'video', 'email', 'document', 'data', 'other')),
  file_name TEXT NOT NULL,
  file_url TEXT, -- Supabase Storage URL or external URL
  file_size BIGINT, -- Size in bytes
  mime_type TEXT,
  
  -- Output data (JSON)
  output_data JSONB,
  
  -- Additional metadata
  metadata JSONB,
  tags TEXT[],
  
  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_workflow_outputs_tenant_id ON workflow_outputs(tenant_id);
CREATE INDEX IF NOT EXISTS idx_workflow_outputs_workflow_id ON workflow_outputs(workflow_id);
CREATE INDEX IF NOT EXISTS idx_workflow_outputs_execution_id ON workflow_outputs(execution_id);
CREATE INDEX IF NOT EXISTS idx_workflow_outputs_output_type ON workflow_outputs(output_type);
CREATE INDEX IF NOT EXISTS idx_workflow_outputs_created_at ON workflow_outputs(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_workflow_outputs_tags ON workflow_outputs USING GIN(tags);

-- Create updated_at trigger
CREATE TRIGGER set_workflow_outputs_updated_at
BEFORE UPDATE ON workflow_outputs
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS
ALTER TABLE workflow_outputs ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view their tenant outputs"
  ON workflow_outputs FOR SELECT
  USING (tenant_id = (auth.jwt() ->> 'tenant_id')::UUID);

CREATE POLICY "Users can insert their tenant outputs"
  ON workflow_outputs FOR INSERT
  WITH CHECK (tenant_id = (auth.jwt() ->> 'tenant_id')::UUID);

CREATE POLICY "Users can update their tenant outputs"
  ON workflow_outputs FOR UPDATE
  USING (tenant_id = (auth.jwt() ->> 'tenant_id')::UUID);

CREATE POLICY "Users can delete their tenant outputs"
  ON workflow_outputs FOR DELETE
  USING (tenant_id = (auth.jwt() ->> 'tenant_id')::UUID);

-- Grant permissions
GRANT ALL ON workflow_outputs TO authenticated;
GRANT SELECT ON workflow_outputs TO anon;

COMMENT ON TABLE workflow_outputs IS 'Stores outputs generated by N8N workflows (reports, images, emails, etc.)';

